name: Sync and Modify Mailcow for Podman

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions: write-all

jobs:
  podmanize-master:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch upstream
        run: |
          git remote add upstream https://github.com/mailcow/mailcow-dockerized.git
          git fetch upstream --tags
          git fetch origin --tags

      - name: Checkout master branch
        run: |
          git checkout master

      - name: Rebase origin/master onto upstream/master (preserving files)
        run: |
          git fetch upstream
          git rebase upstream/master || true

          # Preserve PODMAN.md and docker-compose.override.yml if modified locally
          git checkout --ours PODMAN.md
          git checkout --ours docker-compose.override.yml
          git add PODMAN.md docker-compose.override.yml

          # Resolve conflicts and continue rebase
          git rebase --continue || true

      - name: Apply Podman modifications
        run: |
          changed_files=("README.md" "generate_config.sh" "update.sh" ".gitignore" "docker-compose.yml")
          for file in "${changed_files[@]}"; do
            echo "Modifying $file..."
            case "$file" in
              README.md)
                cat PODMAN.md README.md > PODME.md && mv PODME.md README.md
                ;;
              generate_config.sh)
                sed -i -e 's/docker/podman/g' -e 's/DOCKER/PODMAN/g' -e 's/Docker/Podman/g' "$file"
                sed -i -e 's/ 24/ 4/g' -e 's/\^2/^1/g' -e 's/\^v2/^v1/g' -e 's/2\.X\.X/1.X.X/g' "$file"
                sed -i -e 's/PODMAN_COMPOSE_VERSION/DOCKER_COMPOSE_VERSION/g' -e 's/mailcow\/mailcow/yuusou\/mailcow/g' "$file"
                ;;
              update.sh)
                sed -i -e 's/docker/podman/g' -e 's/DOCKER/PODMAN/g' -e 's/Docker/Podman/g' "$file"
                sed -i -e 's/ 24/ 4/g' -e 's/\^2/^1/g' -e 's/\^v2/^v1/g' -e 's/2\.X\.X/1.X.X/g' "$file"
                sed -i -e 's/PODMAN_COMPOSE_VERSION/DOCKER_COMPOSE_VERSION/g' -e 's/mailcow\/mailcow/yuusou\/mailcow/g' "$file"
                sed -i -e 's/podman-compose\.yml/docker-compose.yml/g' -e 's/hub\.podman/hub.docker/g' -e '/^migrate_podman_nat() {/a\  return 0' "$file"
                ;;
              .gitignore)
                sed -i '/docker-compose.override\.yml/d' "$file"
                ;;
              docker-compose.yml)
                sed -i '/ports:/ { N; /HTTPS/ { N; /HTTP/ d; } }' "$file"
                ;;
            esac
          done

      - name: Commit and push changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Automated podman adjustments for upstream/master"
            git push origin master
          fi

      - name: Podmanize latest tag
        run: |
          git checkout master

          # Get the latest tag pointing to upstream/master
          latest_tag=$(git ls-remote --tags upstream | grep "$(git ls-remote upstream master | cut -f 1)" | sort -t/ -k3,3V | tail -n 1 | sed 's|.*/||')

          if [ -n "$latest_tag" ] && ! git ls-remote --tags origin | grep -q "$latest_tag"; then
            git fetch upstream tag "$latest_tag"
            description=$(git show "$latest_tag" --no-patch --no-notes --pretty=%B)
            git tag -d "$latest_tag" 2>/dev/null || true
            git tag "$latest_tag" -m "$description"
            git push origin "$latest_tag"
          fi
